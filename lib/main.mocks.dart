// Mocks generated by Mockito 5.0.17 from annotations
// in test_project/main.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;
import 'package:test_project/api/gateway_service.dart' as _i3;
import 'package:test_project/api/model/make.dart' as _i8;
import 'package:test_project/api/model/manufacturer.dart' as _i7;
import 'package:test_project/api/model/model.dart' as _i9;
import 'package:test_project/providers/manufacturer_data_provider.dart' as _i6;
import 'package:test_project/providers/preference_manager.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSharedPreferences_0 extends _i1.Fake
    implements _i2.SharedPreferences {}

class _FakeGatewayService_1 extends _i1.Fake implements _i3.GatewayService {}

class _FakePreferenceManager_2 extends _i1.Fake
    implements _i4.PreferenceManager {}

/// A class which mocks [GatewayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGatewayService extends _i1.Mock implements _i3.GatewayService {
  MockGatewayService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> getAllManufacturers(int? page) =>
      (super.noSuchMethod(Invocation.method(#getAllManufacturers, [page]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<String?> getMakesByManufacturer(int? manufacturerId) =>
      (super.noSuchMethod(
          Invocation.method(#getMakesByManufacturer, [manufacturerId]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<String?> getModelsByMakeId(int? makeId) =>
      (super.noSuchMethod(Invocation.method(#getModelsByMakeId, [makeId]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
}

/// A class which mocks [PreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceManager extends _i1.Mock implements _i4.PreferenceManager {
  MockPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakeSharedPreferences_0()) as _i2.SharedPreferences);
  @override
  String? fetchManufacturersResponse(int? page) => (super
          .noSuchMethod(Invocation.method(#fetchManufacturersResponse, [page]))
      as String?);
  @override
  _i5.Future<dynamic> saveManufacturersResponse(String? response, int? page) =>
      (super.noSuchMethod(
          Invocation.method(#saveManufacturersResponse, [response, page]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  String? fetchMakesForManufacturerResponse(int? manufacturerId) =>
      (super.noSuchMethod(Invocation.method(
          #fetchMakesForManufacturerResponse, [manufacturerId])) as String?);
  @override
  _i5.Future<dynamic> saveMakesForManufacturerResponse(
          String? response, int? manufacturerId) =>
      (super.noSuchMethod(
          Invocation.method(
              #saveMakesForManufacturerResponse, [response, manufacturerId]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  String? fetchModelsForMakeIdResponse(int? makeId) => (super.noSuchMethod(
      Invocation.method(#fetchModelsForMakeIdResponse, [makeId])) as String?);
  @override
  _i5.Future<dynamic> saveModelsForMakeIdResponse(
          String? response, int? makeId) =>
      (super.noSuchMethod(
          Invocation.method(#saveModelsForMakeIdResponse, [response, makeId]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}

/// A class which mocks [ManufacturerDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockManufacturerDataProvider extends _i1.Mock
    implements _i6.ManufacturerDataProvider {
  MockManufacturerDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GatewayService get gatewayService =>
      (super.noSuchMethod(Invocation.getter(#gatewayService),
          returnValue: _FakeGatewayService_1()) as _i3.GatewayService);
  @override
  _i4.PreferenceManager get preferenceManager =>
      (super.noSuchMethod(Invocation.getter(#preferenceManager),
          returnValue: _FakePreferenceManager_2()) as _i4.PreferenceManager);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<List<_i7.Manufacturer>> getManufacturers(int? page) =>
      (super.noSuchMethod(Invocation.method(#getManufacturers, [page]),
              returnValue:
                  Future<List<_i7.Manufacturer>>.value(<_i7.Manufacturer>[]))
          as _i5.Future<List<_i7.Manufacturer>>);
  @override
  _i5.Future<List<_i8.Make>> getMakesForManufacturer(int? manufacturerId) =>
      (super.noSuchMethod(
              Invocation.method(#getMakesForManufacturer, [manufacturerId]),
              returnValue: Future<List<_i8.Make>>.value(<_i8.Make>[]))
          as _i5.Future<List<_i8.Make>>);
  @override
  _i5.Future<List<_i9.Model>> getModelsForMakeId(int? makeId) =>
      (super.noSuchMethod(Invocation.method(#getModelsForMakeId, [makeId]),
              returnValue: Future<List<_i9.Model>>.value(<_i9.Model>[]))
          as _i5.Future<List<_i9.Model>>);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i2.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i5.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
